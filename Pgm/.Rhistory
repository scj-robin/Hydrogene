X = cbind(rep(1, n), matrix(rnorm(n*(q-1)), n, (q-1)))
X
n = 10; p = 5; q = 3
I = diag(rep(1, n))
Y = matrix(rnorm(n*p), n, p)
Y = scale(Y, scale=F)
G = Y %*% t(Y)
X = cbind(rep(1, n), matrix(rnorm(n*(q-1)), n, (q-1)))
X
H = X%*%solve(t(X)%*%X)%*%t(X)
Yh = H%*%Y
A = H%*%G
B = H%*%G%*%(I-H)
A - B
Y = Y - rep(1, n)%*%rowMeans(Y)
n = 10; p = 5; q = 3
I = diag(rep(1, n))
Y = matrix(rnorm(n*p), n, p)
Y = Y - rep(1, n)%*%rowMeans(Y)
Y
Y = Y - rep(1, n)%o%rowMeans(Y)
rowMeans(Y)
Y = Y - rep(1, n)%o%colMeans(Y)
Y
colMeans(Y)
G = Y %*% t(Y)
X = cbind(rep(1, n), matrix(rnorm(n*(q-1)), n, (q-1)))
H = X%*%solve(t(X)%*%X)%*%t(X)
Yh = H%*%Y
A = H%*%G
B = H%*%G%*%(I-H)
A - B
Un = rep(1, n); Hun = Un%*%(t(Un)%*%Un)%*%t(Un)
Hun
Yh = (I - Hun)%*%H%*%Y
Yh
dist(Y)^2
dist(H%*%Y)^2
dist((I-H)%*%Y)^2
max(abs(H-t(H)))
sum(eigen(H)val)
sum(eigen(H)$val)
sum(eigen(I-H)$val)
H%*%H
max(abs(H - H%*%H))
max(abs((I-H) - (I-H)%*%(I-H)))
max(abs((I-H)-t(I-H)))
dist(Y)^2
dist(H%*%Y)^2
dist((I-H)%*%Y)^2
install.packages("AEDForecasting")
install.packages("AED")
library(ROCR)
?ROCR
rm(list=ls()); par(pch=20, mfrow=c(2, 2), mex=3/4);
source('/home/robin/PgmR/General/FunctionsMatVec.R')
source('/home/robin/PgmR/Network/FunctionsTree.R')
source('Functions/FunctionsInference.R')
source('Functions/FunctionsSimul.R')
source('Functions/FunctionsDivers.R')
library(sna); library(igraph); library(mvtnorm); library(ROCR); library(glasso); library(vegan); library(mclust)
p = 20; n = 25; d = 2/p
B = 20; BB = 0
P = p*(p-1)/2
Type = 'Erdos'; G = SimErdos(p, d); G.igraph = graph.adjacency(G, mode='undirected')
while (clusters(G.igraph)$no > 1){G = SimErdos(p, d); G.igraph = graph.adjacency(G, mode='undirected')}
nb.triangles = sum(adjacent.triangles(G.igraph))/3
gplot(G, gmode='graph', label=1:p)
Position = gplot(G, gmode='graph', label=1:p)
Position
rm(list=ls()); par(pch=20, mfrow=c(2, 2), mex=3/4);
source('/home/robin/PgmR/General/FunctionsMatVec.R')
source('/home/robin/PgmR/Network/FunctionsTree.R')
source('Functions/FunctionsInference.R')
source('Functions/FunctionsSimul.R')
source('Functions/FunctionsDivers.R')
library(sna); library(igraph); library(mvtnorm); library(ROCR); library(glasso); library(vegan); library(mclust)
p = 20; n = 25; d = 2/p
B = 20; BB = 0
f = cos(u)
b = 1e2
B = 1e3
bb = I = 0
p = acos(-1)
I = rep(0, B)
x = 2*p*runif(b)
f = cos(x)
I[i] = ((i-1)*I + 2*p*mean(f))/i
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runif(b)
2*p
plot(x, f)
mean(f)
I[1:i]
source('~/.active-rstudio-document', echo=TRUE)
?cor.test
rm(list=ls())
library(PLNmodels)
par(pch=20, mfcol=c(2, 2))
load(file='pfam_sample_sumReadCounts.Rdata')
n = nrow(Count); p = ncol(Count)
Count.sum = sum(Count)
Sample.count = rowSums(Count)
Offset = Sample.count%o%rep(1, p)
Sample.cumCount = cumsum(sort(Sample.count))
n.drop = max(which(Sample.cumCount/Count.sum < .01))
Sample.rank = rank(Sample.count)
n.drop.index = which.min(abs(n.drop-Sample.rank))
hist(log10(1+Sample.count), breaks=sqrt(n)); abline(v=log10(1+Sample.count[n.drop.index]))
plot(Sample.cumCount/Count.sum, type='l'); abline(v=n.drop)
Count = Count[which(Sample.rank > n.drop), ]
?system.time
devtools::install_github("jchiquet/PLNmodels", build_vignettes=TRUE)
install.packages("EpiModel")
install.packages("networkDynamicData")
data()
library(EpiModel)
library(networkDynamicData)
data()
data(middle)
data(concurrencyComparisonNets)
ls()
middle
library(ergm)
str(middle)
middle
middle$oel
base
as.data.frame.dcm(base)
library(EpiModel)
as.data.frame.dcm(base)
as.data.frame(base)
head(as.data.frame(base))
data.base = as.data.frame(base)
names(data.base)
color_tea(base)
as.data.rame(color_tea(base))
as.data.frame(color_tea(base))
head(as.data.frame(color_tea(base)))
head(as.data.frame(base))
color_tea(base)
data(package = .packages(all.available = TRUE))
head(as.data.frame(base))
get.vertex.attribute(base, "status.active")
get.vertex.attribute(base)
head(as.data.frame(base))
get.vertex.attribute(base, "status.active")
dim(as.data.frame(base))
length(get.vertex.attribute(base, "status.active"))
get.network(base)
get.networks(base)
get.vertex.id(base)
get.vertex.pid(base)
get.vertex.pid(data.base)
head(data.base)
plot(network.extract(base,at=50),vertex.cex=0.5,edge.lwd=2)
get.vertex.attribute.active(base,'status',at=t)
get.vertex.attribute.active(base,'status',at=20)
sapply(1:100, function(t){get.vertex.attribute.active(base,'status',at=t)})
Path = t(sapply(1:100, function(t){get.vertex.attribute.active(base,'status',at=t)}))
Path = sapply(1:100, function(t){get.vertex.attribute.active(base,'status',at=t)})
colSums(Path)
Path = sapply(1:100, function(t){get.vertex.attribute.active(middle,'status',at=t)})
colSums(Path)
Path = sapply(1:100, function(t){get.vertex.attribute.active(monog,'status',at=t)})
data(concurrencyComparisonNets)
data.base = as.data.frame(base)
Path = sapply(1:100, function(t){get.vertex.attribute.active(base,'status',at=t)})
dim(data.base)
get.vertex.pid(data.base)
get.vertex.attribute(base)
get.vertex.attribute.active(base,'status')
get.vertex.attribute(base,'status')
get.vertex.attribute(base, "status.active")
epidemic.path = sapply(1:100, function(t){get.vertex.attribute.active(base,'status',at=t)})
library(EpiModel)
library(networkDynamicData)
data(concurrencyComparisonNets)
data(concurrencyComparisonNets)
data.base = as.data.frame(base)
head(data.base)
attr = get.vertex.attribute(base, "status.active")
node.attr = get.vertex.attribute(base, "status.active")
length(node.attr)
head(node.attr)
node.attr
epidemic.path = sapply(1:100, function(t){get.vertex.attribute.active(base,'status',at=t)})
plot(rowSums(epidemic.path))
plot(rowSums(epidemic.path), type='l')
plot(rowSums(epidemic.path), type='b')
table(rowSums(epidemic.path), type='b')
table(rowSums(epidemic.path))
get.networks(base)
plot(rowSums(epidemic.path), type='b')
t = 50
plot(network.extract(base,at=t),vertex.cex=0.5,edge.lwd=2)
t = 51
plot(network.extract(base,at=t),vertex.cex=0.5,edge.lwd=2)
G = plot(network.extract(base,at=t),vertex.cex=0.5,edge.lwd=2)
names(G)
layout(G)
network.extract(base,at=t)
G = network.extract(base,at=t)
G
gplot(network.extract(base,at=t), gmode='graph')
library(sna)
gplot(network.extract(base,at=t), gmode='graph')
G = gplot(network.extract(base,at=t), gmode='graph')
G
G = gplot(network.extract(base,at=t+1), gmode='graph', coord=G)
t = 1
G = gplot(network.extract(base,at=1), gmode='graph')
net = network.extract(base,at=t)
net
sum(net)
G = gplot(network.extract(base,at=1), gmode='graph')
for (t in 1:20){
net = network.extract(base,at=t)
gplot(net, gmode='graph', coord=G, main=sum(net))
}
G = gplot(network.extract(base,at=1), gmode='graph')
for (t in 1:20){
net = network.extract(base,at=t)
gplot(net, gmode='graph', coord=G)
}
G = gplot(network.extract(base,at=1), gmode='graph')
for (t in 1:20){
net = network.extract(base,at=t)
status = get.vertex.attribute.active(base,'status',at=t)
gplot(net, gmode='graph', coord=G, vertex.col=1+status)
}
G = gplot(network.extract(base,at=100), gmode='graph')
for (t in 1:20){
net = network.extract(base,at=t)
status = get.vertex.attribute.active(base,'status',at=t)
gplot(net, gmode='graph', coord=G, vertex.col=1+status)
}
G = gplot(network.extract(base,at=100), gmode='graph')
for (t in 1:20){
net = network.extract(base,at=t)
status = get.vertex.attribute.active(base,'status',at=t)
gplot(net, gmode='graph', coord=G, vertex.col=1+status, main=t)
}
G = gplot(network.extract(base,at=1), gmode='graph')
for (t in 1:20){
net = network.extract(base,at=t)
status = get.vertex.attribute.active(base,'status',at=t)
gplot(net, gmode='graph', coord=G, vertex.col=1+status, main=t)
}
epidemic.path = sapply(1:100, function(t){get.vertex.attribute.active(base,'status',at=t)})
data("hagelloch")
install.packages("surveillance")
library(surveillance)
install.packages("spatstat")
libray(phylogeneticEM)
library(PhylogeneticEM)
data()
data("monkeys")
ls()
names(monkeys)
PhyloEM(monkeys$phy, monkeys$dat, process=('scOU'))
?system.time
library(PhylogeneticEM)
data("monkeys")
time = system.time(Res = PhyloEM(monkeys$phy, monkeys$dat, process=('scOU')))
Res = PhyloEM(monkeys$phy, monkeys$dat, process=('scOU'))
system.time(Res = PhyloEM(monkeys$phy, monkeys$dat, process=('scOU')))
system.time(PhyloEM(monkeys$phy, monkeys$dat, process=('scOU')))
library(blockmodels)
n = 1e2; K = 10
pi = runif(K); pi = pi / sum(pi)
alpha = matrix(rnorm(K^2), K, K); alpha = alpha+(alpha); alpha = plogis(alpha)
pi
alpha
Z = t(rmultinom(n, 1, pi))
P = Z%*%alpha%*%t(Z)
P
Y = rbinom(n^2, 1, P); Y[lower.diag(Y)] = 0; diag(Y) = Y; Y = Y + t(Y)
Y = rbinom(n^2, 1, P); Y[upper.diag(Y)] = 0; diag(Y) = Y; Y = Y + t(Y)
Y = rbinom(n^2, 1, P); Y[lower.tri(Y)] = 0; diag(Y) = Y; Y = Y + t(Y)
Y = rbinom(n^2, 1, P)
Y = matrix(rbinom(n^2, 1, P), n, n); Y[lower.tri(Y)] = 0; diag(Y) = Y; Y = Y + t(Y)
Y = matrix(rbinom(n^2, 1, P), n, n); Y[lower.tri(Y)] = 0; diag(Y) = 0; Y = Y + t(Y)
Y
BM_bernoulli(Y)
blockmodels(Y)
BM(Y)
?sort
n = 100
p = 100
k = 1:10
plot(k, k*(log(p/k)), type='b')
abline(h=n)
k = 1:20
plot(k, k*(log(p/k)), type='b')
abline(h=n)
plot(k, k*log(p/k), type='b')
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
n = 20
p = 100
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
n = 205
n = 50
p = 100
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
n = 30
p = 100
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
n = 20
p = 100
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
abline(h=n*log(n))
n
n*log(n)
n = 20
p = 100
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
abline(h=n*log(n))
n = 15
p = 100
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
abline(h=n*log(n))
n*log(n)
n = 10
p = 100
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
abline(h=n*log(n))
p = 1000
k = 1:50
plot(k, k*log(p/k), type='b')
n = 100
p = 1000
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
abline(h=n*log(n))
n*log(n)
n = 20
p = 100
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
abline(h=n*log(n))
p = 200
k = 1:50
plot(k, k*log(p/k), type='b')
abline(h=n)
abline(h=n*log(n))
p = 100
n = 100
k = 1:p/2
plot(k, k*log(p/k), type='b')
abline(h=n*c(1, log(n)))
?choose
p = 100
n = 100
k = 1:p/2
plot(k, k*log(p/k), type='b')
lines(k, log(choose(p, k)), type='b', col=2)
p = 100
n = 100
k = 1:(p/2)
plot(k, k*log(p/k), type='b')
lines(k, log(choose(p, k)), type='b', col=2)
abline(h=n*c(1, log(n)))
p = 100
n = 100
k = 1:(p/2)
plot(k, log(choose(p, k)), type='b', col=2)
lines(k, k*log(p/k), type='b')
abline(h=n*c(1, log(n)))
install.packages("~/Bureau/PLNmodels_0.3.2000.tar.gz", repos = NULL, type = "source")
install.packages("~/Bureau/PLNmodels_0.3.2005.tar.gz", repos = NULL, type = "source")
source('~/RECHERCHE/ECOLOGIE/CountPCA/sparsepca/Pgm/PLNseg/SimPLNseg.R', echo=TRUE)
c('pi', (1:(K-1)))
K = 4
d = 3
c('pi', (1:(K-1)))
paste('pi', (1:(K-1)))
paste0('pi', (1:(K-1)))
paste0('alpha', sapply(1:K, function(k){sapply(k:K, function(l){paste0(k, l)})}))
paste0('alpha', sapply(1:K, function(k){sapply(k:K, function(l){c(k, l)})}))
char(1:4)
paste(1:4)
paste(1:4) %o% paste(1:K)
sapply(1:K, function(k){sapply(k:K, function(l){paste0('alpha', k, l)})}))
paste0('pi', (1:(K-1)))
sapply(1:K, function(k){sapply(k:K, function(l){paste0('alpha', k, l)})}))
sapply(1:K, function(k){sapply(k:K, function(l){paste0('alpha', k, l)})})
unlist(sapply(1:K, function(k){sapply(k:K, function(l){paste0('alpha', k, l)})}))
paste0('beta', (1:d))
library(missMDA)
install.packages("missMDA")
install.packages("~/Bureau/missMDA_1.12.tar.gz", repos = NULL, type = "source")
?rank
?order
n = 100
p = 3
x = runif(n)
y = sample(x, p)
y
x
r = rank(x)
r
x==y
sapply(y, function(yy){r[which(x==yy)]})
r = rank(x, decrasing=T)
sapply(y, function(yy){r[which(x==yy)]})
r = rank(x, decreasing=T)
x = runif(n); y = sample(x, p, w=x)
x = runif(n); y = sample(x, p, weights=x)
?sample
x = runif(n); y = sample(x, p, prob=x)
r = rank(x)
sapply(y, function(yy){r[which(x==yy)]})
n = 100; p = 3; N = n*(n+1)/2
install.packages('keras')
install.packages('tensorflow')
library(keras)
library(tensorflow)
install_keras()
install_tensorflow()
install.packages('keras')
install.packages('tensorflow')
library(keras)
library(tensorflow)
install_keras()
install_tensorflow()
install.packages("keras")
install.packages('tensorflow')
library(keras)
library(tensorflow)
install_keras()
install_tensorflow()
install.packages("clue")
?lme
library(nmle)
install.packages("nmle")
library(nlme)
?lme
?nlme
?glmm
library(glmm)
library(glmmML)
?glmm
install.packages("glmm")
?glmm
library(glmm)
?glmm
library(glmmML)
?glmmML
?optim
?nloptr
library(nloptr)
?nloptr
?glm
?glm.fit
?stats
library(help = "stats")
linrary(nloptr)
library(nloptr)
?nloptr
install.packages("manyglm")
install.packages("mvabund")
x = seq(0, 5, by=.1)
plot(x, x-x*log(x))
rm(list=ls()); par(pch=20)
source('Functions/Functions-MatVec.R')
source('Functions/Functions-VEM-PoisSBMreg.R')
library(blockmodels)
model <- 'PoisSBMreg';
source(paste('Functions/Functions-',model,'.R',sep = ''))
library(vegan)
install.packages("bmotif")
setwd('/home/robin/Bureau/Abdoulaye')
library(vegan)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(gdata)
data.wd <- "/home/diabakhate/HydroGen_Abdou"
data.wd <- "/Hydrogene"
setwd(dir=data.wd)
data.wd
data.wd <- "Hydrogene"
setwd(dir=data.wd)
data1=Genocenoses_env_parameters_all_tara
data.wd <- "Hydrogene/"
setwd(dir=data.wd)
Genocenoses_env_parameters_all_tara <- read_excel(paste0(data.wd, 'Genocenoses_env_parameters_all_tara.xls'))
library(readxl)
Genocenoses_env_parameters_all_tara <- read_excel(paste0(data.wd, 'Genocenoses_env_parameters_all_tara.xls'))
Genocenoses_env_parameters_all_tara <- read_excel('Genocenoses_env_parameters_all_tara.xls')
